/*DROP TRIGGER*/
DROP TRIGGER trigger_reset_case_seq ON public."Tasks";

/*DROP FUNCTION*/
DROP FUNCTION public.func_reset_case_seq();

/*DROP SEQUENCE*/
DROP SEQUENCE IF EXISTS seq_task_tasknum CASCADE;
DROP SEQUENCE IF EXISTS seq_case_casenum CASCADE;

/*DROP TABLES*/
DROP TABLE IF EXISTS public."Tasks";
DROP TABLE IF EXISTS public."Cases";


CREATE TABLE public."Tasks"
(
    "TaskId" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "TaskGuid" uuid NOT NULL,
    "TaskNum" integer NOT NULL,
    "Name" text COLLATE pg_catalog."default" NOT NULL,
    "Description" text COLLATE pg_catalog."default",
    "Explanation" text COLLATE pg_catalog."default",
    "ReturnDataType" text COLLATE pg_catalog."default" NOT NULL,
    "MethodName" text COLLATE pg_catalog."default" NOT NULL,
    "IsProdcution" boolean NOT NULL,
    CONSTRAINT "PK_Tasks" PRIMARY KEY ("TaskId")
)
WITH (
    OIDS = FALSE
)
TABLESPACE pg_default;

ALTER TABLE public."Tasks"
    OWNER to postgres;


CREATE TABLE public."Cases"
(
    "CaseId" integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    "CaseNum" integer NOT NULL,
    "TaskGuid" uuid NOT NULL,
    "FirstInputPara" text NOT NULL,
    "SecondInputPara" text,
    "ValidReturnValue" text COLLATE pg_catalog."default" NOT NULL,
    "SecretTest" boolean NOT NULL,
    CONSTRAINT "PK_Cases" PRIMARY KEY ("CaseId")
)
WITH (
    OIDS = FALSE
)
TABLESPACE pg_default;

ALTER TABLE public."Cases"
    OWNER to postgres;

CREATE INDEX "IX_Cases_TaskGuid"
    ON public."Cases" USING btree
    ("TaskGuid")
    TABLESPACE pg_default;

CREATE SEQUENCE public."seq_task_tasknum"
INCREMENT 1;

CREATE SEQUENCE public."seq_case_casenum"
INCREMENT 1
START 1
MINVALUE 1 
MAXVALUE 7
CACHE 1;

CREATE FUNCTION public.func_reset_case_seq()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF 
AS $BODY$
BEGIN
    ALTER SEQUENCE seq_case_caseNum RESTART WITH 1; 
    RETURN NEW;
END;
$BODY$;

ALTER FUNCTION public.func_reset_case_seq()
    OWNER TO postgres;



CREATE TRIGGER trigger_reset_case_seq
    AFTER INSERT
    ON public."Tasks"
    FOR EACH STATEMENT
    EXECUTE PROCEDURE public.func_reset_case_seq();


